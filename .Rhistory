a <- 'b'
path = fls
path
pat = '.fastq.gz'
list.files(path, pattern = pat)
str(list.files(path, pattern = pat))
foo <- vector('character')
foo
foo <- list.files(path, pattern = pat)
foo
fn <- character(0)
append(foo, list.files(path, pattern = pat))
foo <- vector('character')
append(foo, list.files(path, pattern = pat))
files <- vector('character')
for (pat in pattern) {
append(files, list.files(path, pattern = pat))
}
pattern = c(".fastq.gz$", ".fastq.bz2$", ".fastq$", ".fq.gz$", ".fq.bz2$", ".fq$")
for (pat in pattern) {
append(files, list.files(path, pattern = pat))
}
files
pat
path
list.files(path, pattern = pat)
pat = '.fastq.gz'
list.files(path, pattern = pat)
pat = '.fastq.gz$'
list.files(path, pattern = pat)
files <- vector('character')
for (pat in pattern) {
append(files, list.files(path, pattern = pat))
}
files
files <- vector('character')
files
list.files(path, pattern = pat)
pat = '.fastq.gz$'
list.files(path, pattern = pat)
append(files, list.files(path, pattern = pat))
files
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat))
}
files
file.path(path, files)
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat))
}
file.path(path, files)
path
gsub('/$','',path)
path <- gsub('/$','',path)
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat))
}
file.path(path, files)
pattern = c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat))
}
files
file.path(path, files)
abspath <- function(files)file.path(normalizePath(dirname(files)), files)
abspath(files)
dirname(files)
schuylR::absolute_path(file)
schuylR::absolute_path(files)
files = '~/Desktop/derep/'
n = 1e6
verbose = FALSE
qualityType = "Auto"
if(!is.character(files)) { stop("File paths must be provided in character format.") }
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (pat in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = pat))
}
files <- file.path(normalizePath(dirname(files)), files)
}
files
files = '~/Desktop/derep/'
n = 1e6
verbose = FALSE
qualityType = "Auto"
length(files) == 1 && dir.exists(files)
files <- gsub('/$','',files)
files
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (pat in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = pat))
}
files <- file.path(normalizePath(dirname(fq_files)), fq_files)
}
files
files = '~/Desktop/derep'
n = 1e6
verbose = FALSE
qualityType = "Auto"
if(!is.character(files)) { stop("File paths must be provided in character format.") }
files <- gsub('/$','',files)
files
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (pat in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = pat))
}
files <- file.path(normalizePath(dirname(fq_files)), fq_files)
}
files
path
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat))
}
files
list.files(path, pattern = pat)
files <- vector('character')
for (pat in pattern) {
files <- append(files, list.files(path, pattern = pat, full.names = TRUE))
}
files
files = '~/Desktop/derep'
n = 1e6
verbose = FALSE
qualityType = "Auto"
files = '~/Desktop/derep'
n = 1e6
verbose = FALSE
qualityType = "Auto"
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (pat in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = pat, full.names = TRUE))
}
files <- fq_files
}
files
!all(file.exists(files))
seq_along(files)
i=1
files = '~/Desktop/derep'
if(!is.character(files)) { stop("File paths must be provided in character format.") }
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (extension in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = extension, full.names = TRUE))
}
files <- fq_files
}
if(!all(file.exists(files))) { stop("Not all provided files exist.") }
i=1
fl <- files[[i]]
message("Dereplicating sequence entries in Fastq file: ", fl, appendLF = TRUE)
FastqStreamer(fl, n = n)
ShortRead::FastqStreamer(fl, n = n)
n = 1e6
n = 1e6
ShortRead::FastqStreamer(fl, n = n)
f <- FastqStreamer(fl, n = n)
f <- ShortRead::FastqStreamer(fl, n = n)
yield(f, qualityType = qualityType)
ShortRead::yield(f, qualityType = qualityType)
fq <- yield(f, qualityType = qualityType)
fq <- ShortRead::yield(f, qualityType = qualityType)
qualityType = "Auto"
fq <- ShortRead::yield(f, qualityType = qualityType)
fq
files[[i]]
i
fl
qtables2(fq, FALSE)
out <- ShortRead::qtables2(fq, FALSE) ###ITS
out <- dada2::qtables2(fq, FALSE) ###ITS
out <- dada2:::qtables2(fq, FALSE) ###ITS
fl
f <- ShortRead::FastqStreamer(fl, n = n)
suppressWarnings(fq <- ShortRead::yield(f, qualityType = qualityType))
out <- dada2:::qtables2(fq, FALSE) ###ITS
fq
out
fl
f <- ShortRead::FastqStreamer(fl, n = n)
suppressWarnings(fq <- ShortRead::yield(f, qualityType = qualityType))
x = fq
srt <- ShortRead::srsort(x)
rnk <- ShortRead::srrank(x)
tab <- tabulate(rnk)
tab
tail(tab)
srtrnk <- ShortRead::srrank(srt)
srtrnk
unq <- unique(srtrnk)
unq
uniques <- tab[unq]
x = fq
srt <- ShortRead::srsort(x)
rnk <- ShortRead::srrank(x)
tab <- tabulate(rnk)
rnksrt <- ShortRead::srrank(srt)
unq <- unique(rnksrt)
uniques <- tab[unq]
names(uniques) <- as.character(sread(srt)[unq])
rnk2unqi <- rep(seq(length(uniques)), tab[tab > 0])
map <- rnk2unqi[rnk]
qmat <- as(quality(srt), "matrix")
if (qeff)
qmat <- 10^(-qmat/10)
qmat <- rowsum(qmat, rnksrt, reorder = FALSE)
rownames(qmat) <- names(uniques)
list(uniques = uniques, cum_quals = qmat, map = map)
names(uniques) <- as.character(rnksrtsread(srt)[unq])
rnk2unqi <- rep(seq(length(uniques)), tab[tab > 0])
map <- rnk2unqi[rnk]
qmat <- as(quality(srt), "matrix")
qmat <- as(Biostrings::quality(srt), "matrix")
Biostrings::quality(srt)
qmat <- rowsum(qmat, rnksrt, reorder = FALSE)
qmat
rownames(qmat) <- names(uniques)
list(uniques = uniques, cum_quals = qmat, map = map)
fq
files = '~/Desktop/derep/test.fastq'
n = 1e6
verbose = FALSE
qualityType = "Auto"
if(!is.character(files)) { stop("File paths must be provided in character format.") }
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (extension in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = extension, full.names = TRUE))
}
files <- fq_files
}
files
if(!all(file.exists(files))) { stop("Not all provided files exist.") }
rval <- list()
i
fl <- files[[i]]
fl
list.files(files, pattern = extension, full.names = TRUE)
list.files(files, full.names = TRUE)
files
basename(files)
list.files(files, pattern = basename(files), full.names = TRUE)
dirname(files)
list.files(dirname(files), pattern = basename(files), full.names = TRUE)
files
files <- append(files, files)
files
list.files(dirname(files), pattern = basename(files), full.names = TRUE)
files = '~/Desktop/derep/test.fastq'
n = 1e6
verbose = FALSE
qualityType = "Auto"
if(!is.character(files)) { stop("File paths must be provided in character format.") }
if(length(files) == 1 && dir.exists(files)) {
files <- gsub('/$','',files)
fq_files <- vector('character')
for (extension in c(".fastq.gz$", ".fastq.bz.?$", ".fastq$", ".fq.gz$", ".fq.bz.?$", ".fq$")) {
fq_files <- append(fq_files, list.files(files, pattern = extension, full.names = TRUE))
}
files <- fq_files
} else {
files <- list.files(dirname(files), pattern = basename(files), full.names = TRUE)
}
files
if(!all(file.exists(files))) { stop("Not all provided files exist.") }
rval <- list()
i
fl <- files[[i]]
if(verbose){
message("Dereplicating sequence entries in Fastq file: ", fl, appendLF = TRUE)
}
f <- ShortRead::FastqStreamer(fl, n = n)
suppressWarnings(fq <- ShortRead::yield(f, qualityType = qualityType))
x = fq
srt <- ShortRead::srsort(x)
srt
rnk <- ShortRead::srrank(x)
rnk
tab <- tabulate(rnk)
tab
length(rnk)
length(tab)
rnksrt <- ShortRead::srrank(srt)
rnksrt
sort(srt)
srt
rnk
ShortRead::srrank(srt)
sort(rnk)
unq <- unique(rnksrt)
unq
tab
uniques <- tab[unq]
uniques
as.character(rnksrtsread(srt)[unq])
as.character(ShortRead::rnksrtsread(srt)[unq])
names(uniques) <- as.character(Biostrings::rnksrtsread(srt)[unq])
names(uniques) <- as.character(dada2:::rnksrtsread(srt)[unq])
names(uniques) <- as.character(sread(srt)[unq])
names(uniques) <- as.character(sread(srt)[unq])
names(uniques) <- as.character(ShortRead::sread(srt)[unq])
names(uniques)
uniques
rnk2unqi <- rep(seq(length(uniques)), tab[tab > 0])
rnk2unqi
map <- rnk2unqi[rnk]
map
qmat <- as(Biostrings::quality(srt), "matrix")
qmat <- rowsum(qmat, rnksrt, reorder = FALSE)
qmat
rownames(qmat) <- names(uniques)
list(uniques = uniques, cum_quals = qmat, map = map)
uniques
str(uniques)
dada2::derepFastq('~/Desktop/derep/test.fastq')
dada2::derepFastq('~/Desktop/derep/test.fastq')$uniques
dada2::derepFastq('~/Desktop/derep/test.fastq')
a <- dada2::derepFastq('~/Desktop/derep/test.fastq')
hist(a$uniques)
plot(a$uniques)
barplot(a$uniques)
a <- dada2::derepFastq('~/Desktop/derep/Q3-Mock-0spike-A_S1_L001_R1_001.fastq.gz')
barplot(a$uniques)
path = '~/unaligned_BLAST/'
setwd(path)
Sys.setenv("PKG_LIBS"="-lboost_iostreams")
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
fastq_file_path = 'test10000.fastq'
fastq_file_path = 'Q3-Mock-0spike-A_S1_L001_R1_001.fastq.gz'
BLAST_file_path = 'Q3-Mock-0spike-A_S1_L001_R1_001.blast'
if(length(fastq_file_path) == 1 && dir.exists(fastq_file_path)){
fastq_file_path <- gsub('/$','',fastq_file_path)
fastq_file <- vector()
for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
fastq_file <- append(fastq_file, dir(fastq_file_path, extension, full.names = TRUE))
}
} else {
fastq_file <- normalizePath(fastq_file_path)
}
if(length(BLAST_file_path) == 1 && dir.exists(BLAST_file_path)){
BLAST_file_path <- gsub('/$','',BLAST_file_path)
BLAST_file <- dir(BLAST_file_path, full.names = TRUE)
} else {
BLAST_file <- normalizePath(BLAST_file_path)
}
if(length(fastq_file) > 1 || length(BLAST_file) > 1){
if(length(fastq_file) != length(BLAST_file)){
warning('Number of submitted FASTQ and BLAST files are not equal\nonly files with corresponding names will be used.')
fastq_file <- fastq_file[sapply(strsplit(fastq_file,'\\.'),"[[", 1) %in% sapply(strsplit(BLAST_file,'\\.'),"[[", 1)]
BLAST_file <- BLAST_file[sapply(strsplit(BLAST_file,'\\.'),"[[", 1) %in% sapply(strsplit(fastq_file,'\\.'),"[[", 1)]
if(length(fastq_file) != length(BLAST_file) || length(BLAST_file) == 0 || length(fastq_file) == 0){
stop('did it wrong')
}
}
}
# for(file in seq_along(fastq_file)){
#   unaligned_BLAST_sequences(fastq_file[file],
#                             data.table::fread(BLAST_file[file])[[1]],
#                             file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
# }
file = 1
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
data.table::fread(BLAST_file[file])[[1]],
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
data.table::fread(BLAST_file[file])[[1]],
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences1(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
file = 1
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
library(data.table)
fread('~/HPCC_Transfer/dereplicated_unaligned_Q3-FS12A-14_S89_L001_R1_001.blast')
a <- fread('~/HPCC_Transfer/dereplicated_unaligned_Q3-FS12A-14_S89_L001_R1_001.blast')
a
table(a$V3)
devtools::document()
setwd('~/Dropbox/repos/ssBLAST/')
devtools::document()
Rcpp::compileAttributes()
