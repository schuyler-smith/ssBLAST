if(!all(file.exists(files))) { stop("Not all provided files exist.") }
rval <- list()
i
fl <- files[[i]]
if(verbose){
message("Dereplicating sequence entries in Fastq file: ", fl, appendLF = TRUE)
}
f <- ShortRead::FastqStreamer(fl, n = n)
suppressWarnings(fq <- ShortRead::yield(f, qualityType = qualityType))
x = fq
srt <- ShortRead::srsort(x)
srt
rnk <- ShortRead::srrank(x)
rnk
tab <- tabulate(rnk)
tab
length(rnk)
length(tab)
rnksrt <- ShortRead::srrank(srt)
rnksrt
sort(srt)
srt
rnk
ShortRead::srrank(srt)
sort(rnk)
unq <- unique(rnksrt)
unq
tab
uniques <- tab[unq]
uniques
as.character(rnksrtsread(srt)[unq])
as.character(ShortRead::rnksrtsread(srt)[unq])
names(uniques) <- as.character(Biostrings::rnksrtsread(srt)[unq])
names(uniques) <- as.character(dada2:::rnksrtsread(srt)[unq])
names(uniques) <- as.character(sread(srt)[unq])
names(uniques) <- as.character(sread(srt)[unq])
names(uniques) <- as.character(ShortRead::sread(srt)[unq])
names(uniques)
uniques
rnk2unqi <- rep(seq(length(uniques)), tab[tab > 0])
rnk2unqi
map <- rnk2unqi[rnk]
map
qmat <- as(Biostrings::quality(srt), "matrix")
qmat <- rowsum(qmat, rnksrt, reorder = FALSE)
qmat
rownames(qmat) <- names(uniques)
list(uniques = uniques, cum_quals = qmat, map = map)
uniques
str(uniques)
dada2::derepFastq('~/Desktop/derep/test.fastq')
dada2::derepFastq('~/Desktop/derep/test.fastq')$uniques
dada2::derepFastq('~/Desktop/derep/test.fastq')
a <- dada2::derepFastq('~/Desktop/derep/test.fastq')
hist(a$uniques)
plot(a$uniques)
barplot(a$uniques)
a <- dada2::derepFastq('~/Desktop/derep/Q3-Mock-0spike-A_S1_L001_R1_001.fastq.gz')
barplot(a$uniques)
path = '~/unaligned_BLAST/'
setwd(path)
Sys.setenv("PKG_LIBS"="-lboost_iostreams")
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
fastq_file_path = 'test10000.fastq'
fastq_file_path = 'Q3-Mock-0spike-A_S1_L001_R1_001.fastq.gz'
BLAST_file_path = 'Q3-Mock-0spike-A_S1_L001_R1_001.blast'
if(length(fastq_file_path) == 1 && dir.exists(fastq_file_path)){
fastq_file_path <- gsub('/$','',fastq_file_path)
fastq_file <- vector()
for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
fastq_file <- append(fastq_file, dir(fastq_file_path, extension, full.names = TRUE))
}
} else {
fastq_file <- normalizePath(fastq_file_path)
}
if(length(BLAST_file_path) == 1 && dir.exists(BLAST_file_path)){
BLAST_file_path <- gsub('/$','',BLAST_file_path)
BLAST_file <- dir(BLAST_file_path, full.names = TRUE)
} else {
BLAST_file <- normalizePath(BLAST_file_path)
}
if(length(fastq_file) > 1 || length(BLAST_file) > 1){
if(length(fastq_file) != length(BLAST_file)){
warning('Number of submitted FASTQ and BLAST files are not equal\nonly files with corresponding names will be used.')
fastq_file <- fastq_file[sapply(strsplit(fastq_file,'\\.'),"[[", 1) %in% sapply(strsplit(BLAST_file,'\\.'),"[[", 1)]
BLAST_file <- BLAST_file[sapply(strsplit(BLAST_file,'\\.'),"[[", 1) %in% sapply(strsplit(fastq_file,'\\.'),"[[", 1)]
if(length(fastq_file) != length(BLAST_file) || length(BLAST_file) == 0 || length(fastq_file) == 0){
stop('did it wrong')
}
}
}
# for(file in seq_along(fastq_file)){
#   unaligned_BLAST_sequences(fastq_file[file],
#                             data.table::fread(BLAST_file[file])[[1]],
#                             file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
# }
file = 1
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
data.table::fread(BLAST_file[file])[[1]],
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
data.table::fread(BLAST_file[file])[[1]],
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences1(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
file = 1
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_')))
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
unaligned_BLAST_sequences2(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
tools::file_path_sans_ext(file.path(dirname(fastq_file[file]), paste("unaligned", basename(fastq_file[file]), sep = '_'))))
end_time <- Sys.time()
end_time - start_time
fastq_file_path = '~/Dropbox/unaligned_BLAST/fastqs/'
BLAST_file_path = '~/Dropbox/unaligned_BLAST/blasts/'
output_path = '~/Dropbox/unaligned_BLAST/unaligned/'
if(length(fastq_file_path) == 1 && dir.exists(fastq_file_path)){
fastq_file_path <- gsub('/$','',fastq_file_path)
fastq_file <- vector()
for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
fastq_file <- append(fastq_file, dir(fastq_file_path, extension, full.names = TRUE))
}
} else {
fastq_file <- normalizePath(fastq_file_path)
}
if(length(BLAST_file_path) == 1 && dir.exists(BLAST_file_path)){
BLAST_file_path <- gsub('/$','',BLAST_file_path)
BLAST_file <- dir(BLAST_file_path, full.names = TRUE)
} else {
BLAST_file <- normalizePath(BLAST_file_path)
}
if(length(fastq_file) > 1 || length(BLAST_file) > 1){
if(length(fastq_file) != length(BLAST_file)){
warning('Number of submitted FASTQ and BLAST files are not equal\nonly files with corresponding names will be used.')
fastq_file <- fastq_file[basename(sapply(strsplit(fastq_file,'\\.'),"[[", 1)) %in% basename(sapply(strsplit(BLAST_file,'\\.'),"[[", 1))]
BLAST_file <- BLAST_file[basename(sapply(strsplit(BLAST_file,'\\.'),"[[", 1)) %in% basename(sapply(strsplit(fastq_file,'\\.'),"[[", 1))]
if(length(fastq_file) != length(BLAST_file) || length(BLAST_file) == 0 || length(fastq_file) == 0){
stop('All fastq files should have a corresponding BLAST file.')
}
}
}
fastq_file
BLAST_file
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
Sys.setenv("PKG_LIBS"="-lboost_iostreams")
Rcpp::sourceCpp('src/unaligned_BLAST_sequences.cpp', rebuild = T)
Sys.setenv("PKG_LIBS"="-lboost_iostreams")
Rcpp::sourceCpp('~/Dropbox/repos/BLAST_tools/src/unaligned_BLAST_sequences.cpp', rebuild = T)
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
file = 1
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = ''))
file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = ''))
output_path
normalizePath(              file.path(gsub('/$','',output_path), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
normalizePath(output_path)
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = ''))
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
fastq_file_path = '~/Dropbox/unaligned_BLAST/fastqs/'
BLAST_file_path = '~/Dropbox/unaligned_BLAST/blasts/'
output_path = '~/Dropbox/unaligned_BLAST/unaligned/'
if(length(fastq_file_path) == 1 && dir.exists(fastq_file_path)){
fastq_file_path <- gsub('/$','',fastq_file_path)
fastq_file <- vector()
for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
fastq_file <- append(fastq_file, dir(fastq_file_path, extension, full.names = TRUE))
}
} else {
fastq_file <- normalizePath(fastq_file_path)
}
if(length(BLAST_file_path) == 1 && dir.exists(BLAST_file_path)){
BLAST_file_path <- gsub('/$','',BLAST_file_path)
BLAST_file <- dir(BLAST_file_path, full.names = TRUE)
} else {
BLAST_file <- normalizePath(BLAST_file_path)
}
if(length(fastq_file) > 1 || length(BLAST_file) > 1){
if(length(fastq_file) != length(BLAST_file)){
warning('Number of submitted FASTQ and BLAST files are not equal\nonly files with corresponding names will be used.')
fastq_file <- fastq_file[basename(sapply(strsplit(fastq_file,'\\.'),"[[", 1)) %in% basename(sapply(strsplit(BLAST_file,'\\.'),"[[", 1))]
BLAST_file <- BLAST_file[basename(sapply(strsplit(BLAST_file,'\\.'),"[[", 1)) %in% basename(sapply(strsplit(fastq_file,'\\.'),"[[", 1))]
if(length(fastq_file) != length(BLAST_file) || length(BLAST_file) == 0 || length(fastq_file) == 0){
stop('All fastq files should have a corresponding BLAST file.')
}
}
}
if(output_path){
if(dir.exists(output_path)){
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
normalizePath(output_path))
}
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
}
output_path = FALSE
lengtH(output_path)
length(output_path)
output_path != FALSE
output_path = '~/Dropbox/unaligned_BLAST/unaligned/'
output_path != FALSE
if(output_path){
if(dir.exists(output_path)){
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
normalizePath(output_path))
}
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
}
if(output_path != FALSE){
if(dir.exists(output_path)){
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
normalizePath(output_path))
}
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
}
output_path
if(!is.null(output_path)){
if(dir.exists(output_path)){
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
normalizePath(output_path))
}
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
}
if(!is.null(output_path)){
if(dir.exists(output_path)){
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(gsub('/$','',normalizePath(output_path)), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
normalizePath(output_path))
}
}
} else {
for(file in seq_along(fastq_file)){
unaligned_BLAST_sequences(fastq_file[file],
unique(data.table::fread(BLAST_file[file])[[1]]),
file.path(dirname(fastq_file[file]), paste("unaligned_",
basename(sapply(strsplit(fastq_file[file],'\\.'),"[[", 1)),
".fastq", sep = '')))
}
}
devtools::document()
setwd('~/Dropbox/repos/BLAST_tools/')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
Rcpp::compileAttributes()
devtools::check()
devtools::document()
devtools::check()
setwd('~/Dropbox/repos/ssBLAST/')
setwd('~/Dropbox/repos/ssBLAST/')
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install_github('schuyler-smith/ssBLAST')
devtools::update_packages()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
Rcpp::compileAttributes()
devtools::check()
Rcpp::compileAttributes()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
setwd('~/Dropbox/repos/ssBLAST/')
devtools::document()
devtools::check()
