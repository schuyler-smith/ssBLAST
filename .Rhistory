p <- p + theme_bw()
p
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = OTU))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ Treatment, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = OTU))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ Treatment, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 90, hjust = 1))
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 45, hjust = 1))
p
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = OTU))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ Treatment, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + ylab("Relative Abundance")
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 45, hjust = 1))
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
ggsave("Desktop/Lacto/relative_abundance_plot.png")
colnames(relabundance_table)
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = OTU))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ month, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + ylab("Relative Abundance")
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 45, hjust = 1))
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = Experiment))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ month, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + ylab("Relative Abundance")
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 45, hjust = 1))
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
p <- ggplot(relabundance_table, aes(x = as.factor(Sample), y = Abundance, fill = Treatment))
p <- p + geom_bar(stat = "identity", width = 0.5)
p <- p + facet_grid(. ~ month, space = "free", scales = "free")
p <- p + theme_bw()
p <- p + ylab("Relative Abundance")
p <- p + theme(axis.title.x=element_blank(),
axis.text.x=element_text(angle = 45, hjust = 1))
axis.ticks.x=element_blank())
p <- p + theme(legend.key.size = unit(0.5,"line"))
p <- p + guides(fill=guide_legend(ncol=1))
p
ggsave("Desktop/Lacto/relative_abundance_plot_bymonth.png")
library(phyloschuyler)
library(Rcpp)
phyloseq_obj = mock_phyloseq
phyloseq_obj = prune_samples(sample_data(phyloseq_obj)$day == "5", phyloseq_obj)
treatment = "day"; treatments <- as.character(unique(sample_data(phyloseq_obj)[[treatment]]))
treatment_indices <- lapply(treatments, FUN = function(trt){which(as.character(sample_data(phyloseq_obj)[[treatment]]) %in% trt)-1})
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
phyloseq_obj = mock_phyloseq
treatment = "day"; treatments <- as.character(unique(sample_data(phyloseq_obj)[[treatment]]))
treatment_indices <- lapply(treatments, FUN = function(trt){which(as.character(sample_data(phyloseq_obj)[[treatment]]) %in% trt)-1})
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
otu_table(mock_phyloseq)
sourceCpp("~/Dropbox/FCO_R_API/Rewrite/FastCoOccur_Rcpp.cpp")
FastCoOccur_Rcpp(otu_table(phyloseq_obj), treatment_indices = treatment_indices, treatments = treatments)
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
library(Rcpp)
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
sourceCpp("~/Dropbox/debugging/compare_ASV_test/tbbex.cpp")
library(devtools)
install_github('schuyler-smith/schuylR')
update_packages()
update_packages()
install.packages('rgl')
install.packages('rgl')
update_packages()
update_packages()
update_packages()
update_packages()
update_packages()
update_packages()
install.packages('freetype2')
remove.packages{'rgl'}
remove.packages('rgl')
remove.packages(rgl)
version
path <- '/Desktop/dd2'
library(dada2); library(data.table)
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
fnRs
fnFs
path <- '~/Desktop/dd2'
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
fnFs
fnRs
plotQualityProfile(fnFs[1])
statdf <- data.frame(Cycle = integer(0), Mean = numeric(0),
Q25 = numeric(0), Q50 = numeric(0), Q75 = numeric(0),
Cum = numeric(0), file = character(0))
anndf <- data.frame(minScore = numeric(0), label = character(0),
rclabel = character(0), rc = numeric(0), file = character(0))
fnFs
fl = fnFs
n = 5e+05
aggregate = FALSE
statdf <- data.frame(Cycle = integer(0), Mean = numeric(0),
Q25 = numeric(0), Q50 = numeric(0), Q75 = numeric(0),
Cum = numeric(0), file = character(0))
anndf <- data.frame(minScore = numeric(0), label = character(0),
rclabel = character(0), rc = numeric(0), file = character(0))
FIRST <- TRUE
fl[!is.na(fl)]
srqa <- qa(f, n = n)
srqa <- dada2:::qa(f, n = n)
srqa <- dada2::qa(f, n = n)
srqa <- dada2:::qa(f, n = n)
?qa
srqa <- ShortRead::qa(f, n = n)
f = fl
srqa <- ShortRead::qa(f, n = n)
srqa
srqa@.srlist
srqa@.srlist$readCounts
df <- srqa[["perCycle"]]$quality
df
rc <- sum(srqa[["readCounts"]]$read)
rc
if (rc >= n) {
rclabel <- paste("Reads >= ", n)
}
rc >= n
else {
rclabel <- paste("Reads: ", rc)
}
if (rc >= n) {
rclabel <- paste("Reads >= ", n)
}
rclabel
means <- rowsum(df$Score * df$Count, df$Cycle)/rowsum(df$Count,
df$Cycle)
means
q
get_quant <- function(xx, yy, q) {
xx[which(cumsum(yy)/sum(yy) >= q)][[1]]
}
q25s <- by(df, df$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.25), simplify = TRUE)
q50s <- by(df, df$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.5), simplify = TRUE)
q75s <- by(df, df$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.75), simplify = TRUE)
q25s
q50s
q75s
df
cums <- by(df, df$Cycle, function(foo) sum(foo$Count),
simplify = TRUE)
cums
if (!all(sapply(list(names(q25s), names(q50s), names(q75s),
names(cums)), identical, rownames(means)))) {
stop("Calculated quantiles/means weren't compatible.")
}
?get_quant
??get_quant
?by
df$Cycle
df
FIRST
plotdf <- cbind(df, file = basename(f))
plotdf
q50s
statdf <- rbind(statdf, data.frame(Cycle = as.integer(rownames(means)),
Mean = means, Q25 = as.vector(q25s), Q50 = as.vector(q50s),
Q75 = as.vector(q75s), Cum = 10 * as.vector(cums)/rc,
file = basename(f)))
anndf <- rbind(anndf, data.frame(minScore = min(df$Score),
label = basename(f), rclabel = rclabel, rc = rc,
file = basename(f)))
statdf
anndf
min(anndf$minScore)
anndf$minScore <- min(anndf$minScore)
aggregate
if (aggregate) {
plotdf.summary <- aggregate(Count ~ Cycle + Score, plotdf,
sum)
plotdf.summary$label <- paste(nrow(anndf), "files (aggregated)")
means <- rowsum(plotdf.summary$Score * plotdf.summary$Count,
plotdf.summary$Cycle)/rowsum(plotdf.summary$Count,
plotdf.summary$Cycle)
q25s <- by(plotdf.summary, plotdf.summary$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.25), simplify = TRUE)
q50s <- by(plotdf.summary, plotdf.summary$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.5), simplify = TRUE)
q75s <- by(plotdf.summary, plotdf.summary$Cycle, function(foo) get_quant(foo$Score,
foo$Count, 0.75), simplify = TRUE)
cums <- by(plotdf.summary, plotdf.summary$Cycle, function(foo) sum(foo$Count),
simplify = TRUE)
statdf.summary <- data.frame(Cycle = as.integer(rownames(means)),
Mean = means, Q25 = as.vector(q25s), Q50 = as.vector(q50s),
Q75 = as.vector(q75s), Cum = 10 * as.vector(cums)/rc)
p <- ggplot(data = plotdf.summary, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black") + geom_line(data = statdf.summary,
aes(y = Mean), color = "#66C2A5") + geom_line(data = statdf.summary,
aes(y = Q25), color = "#FC8D62", size = 0.25, linetype = "dashed") +
geom_line(data = statdf.summary, aes(y = Q50), color = "#FC8D62",
size = 0.25) + geom_line(data = statdf.summary,
aes(y = Q75), color = "#FC8D62", size = 0.25, linetype = "dashed") +
ylab("Quality Score") + xlab("Cycle") + annotate("text",
x = 0, y = 0, label = sprintf("Total reads: %d",
sum(anndf$rc)), color = "red", hjust = 0) +
theme_bw() + theme(panel.grid = element_blank()) +
guides(fill = FALSE) + facet_wrap(~label) + ylim(c(0,
NA))
if (length(unique(statdf$Cum)) > 1) {
p <- p + geom_line(data = statdf.summary, aes(y = Cum/nrow(anndf)),
color = "red", size = 0.25, linetype = "solid") +
scale_y_continuous(sec.axis = sec_axis(~. *
10, breaks = c(0, 100), labels = c("0%", "100%"))) +
theme(axis.text.y.right = element_text(color = "red"),
axis.title.y.right = element_text(color = "red"))
}
}
plotdf
p <- ggplot(data = plotdf, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black") + geom_line(data = statdf, aes(y = Mean),
color = "#66C2A5") + geom_line(data = statdf, aes(y = Q25),
color = "#FC8D62", size = 0.25, linetype = "dashed") +
geom_line(data = statdf, aes(y = Q50), color = "#FC8D62",
size = 0.25) + geom_line(data = statdf, aes(y = Q75),
color = "#FC8D62", size = 0.25, linetype = "dashed") +
ylab("Quality Score") + xlab("Cycle") + theme_bw() +
theme(panel.grid = element_blank()) + guides(fill = FALSE) +
geom_text(data = anndf, aes(x = 0, label = rclabel,
y = 0), color = "red", hjust = 0) + facet_wrap(~file) +
ylim(c(0, NA))
library(ggplot2)
p <- ggplot(data = plotdf, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black") + geom_line(data = statdf, aes(y = Mean),
color = "#66C2A5") + geom_line(data = statdf, aes(y = Q25),
color = "#FC8D62", size = 0.25, linetype = "dashed") +
geom_line(data = statdf, aes(y = Q50), color = "#FC8D62",
size = 0.25) + geom_line(data = statdf, aes(y = Q75),
color = "#FC8D62", size = 0.25, linetype = "dashed") +
ylab("Quality Score") + xlab("Cycle") + theme_bw() +
theme(panel.grid = element_blank()) + guides(fill = FALSE) +
geom_text(data = anndf, aes(x = 0, label = rclabel,
y = 0), color = "red", hjust = 0) + facet_wrap(~file) +
ylim(c(0, NA))
p
length(unique(statdf$Cum)) > 1
p <- ggplot(data = plotdf, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black") + geom_line(data = statdf, aes(y = Mean),
color = "#66C2A5") + geom_line(data = statdf, aes(y = Q25),
color = "#FC8D62", size = 0.25, linetype = "dashed")
p
p <- ggplot(data = plotdf, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black")
p
p <- ggplot(data = plotdf, aes(x = Cycle, y = Score)) +
geom_tile(aes(fill = Count)) + scale_fill_gradient(low = "#F5F5F5",
high = "black")
p <- p + geom_line(data = statdf, aes(y = Mean),
color = "#66C2A5")
p
p <- p + geom_line(data = statdf, aes(y = Q25),
color = "#FC8D62", size = 0.25, linetype = "dashed")
p
p <- p + geom_line(data = statdf, aes(y = Q50), color = "#FC8D62",
size = 0.25)
p
p <- p + geom_line(data = statdf, aes(y = Q75), color = "#FC8D62",
size = 0.25, linetype = "dashed") +
ylab("Quality Score") + xlab("Cycle") + theme_bw() +
theme(panel.grid = element_blank()) + guides(fill = FALSE) +
geom_text(data = anndf, aes(x = 0, label = rclabel,
y = 0), color = "red", hjust = 0) + facet_wrap(~file) +
ylim(c(0, NA))
p
seqs <- readRDS('~/HPCC_Transfer/seq_table.RDS')
tax <- readRDS('~/HPCC_Transfer/tax_table.RDS')
library(phyloseq)
library(dada2)
library(data.table)
pools <- sort(list.files(file.path('~/Desktop/pitfoam'), full.names = TRUE))
n = 0
for(pool in pools){
n <- n + 1
seq_table <- readRDS(file.path(pool, 'dada2/seq_table.RDS'))
tax_table <- readRDS(file.path(pool, 'dada2/tax_table.RDS'))
phylo_obj <- phyloseq(otu_table(seq_table, taxa_are_rows = TRUE), tax_table(tax_table))
print(nsamples(phylo_obj))
print(ntaxa(phylo_obj))
if(n > 1){
phyloseq_obj <- merge_phyloseq(phylo_obj, phyloseq_obj)
} else {
phyloseq_obj <- phylo_obj
}
}
pools <- sort(list.files(file.path('~/Desktop/pitfoam'), pattern = 'pool_', full.names = TRUE))
pools
n = 0
for(pool in pools){
n <- n + 1
seq_table <- readRDS(file.path(pool, 'dada2/seq_table.RDS'))
tax_table <- readRDS(file.path(pool, 'dada2/tax_table.RDS'))
phylo_obj <- phyloseq(otu_table(seq_table, taxa_are_rows = TRUE), tax_table(tax_table))
print(nsamples(phylo_obj))
print(ntaxa(phylo_obj))
if(n > 1){
phyloseq_obj <- merge_phyloseq(phylo_obj, phyloseq_obj)
} else {
phyloseq_obj <- phylo_obj
}
}
phyloseq_obj
sam_1 <- fread('~/Desktop/pitfoam/FM_16S env data.csv', fill = TRUE)
sam_2 <- fread('~/Desktop/pitfoam/FM_16S mapping file.csv', fill = TRUE)
sample_names(phyloseq_obj)
library(gsubfn)
read.pattern(text = 'FM_16s_7_CAGGCGTATTGG', pattern = "(.*)_(.*)_(.*)")
read.pattern(text = 'FM_16s_7_CAGGCGTATTGG', pattern = "(.*_.*_.*)")
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)")
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*_)")
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*_)", sep = '_')
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*_)")
a <- read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*_)")
substr(a, 1, nchar(a)-1)
a
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")
sample_names(phyloseq_obj) <- read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_") -> a
a
dim(A)
sample_names(phyloseq_obj) <- unlist(read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_"))
sample_names(phyloseq_obj) <- read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")[[1]]
sample_names(phyloseq_obj)
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")[[1]]
sample_names(phyloseq_obj)
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")
sample_names(phyloseq_obj)
unique(sample_names(phyloseq_obj))
sort(sample_names(phyloseq_obj))
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")
sample_names(phyloseq_obj)
read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")
sort(read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_"))
sort(read.pattern(text = sample_names(phyloseq_obj), pattern = "(.*_.*_.*)_")[[1]])
devtools::update_packages()
library(Rcpp)
library(ggplot2)
library(plotly)
library(tools)
library(data.table)
library(ggpubr)
library(vegan)
soil_column_I_ARGS <- readRDS('data/soil_column_I_ARGs.RDS)
soil_column_I_ARGS <- readRDS('data/soil_column_I_ARGs.RDS')
soil_column_I_ARGS@tax_table
head(soil_column_I_ARGS@tax_table)
phylosmith::phylogeny_profile(soil_column_I_ARGS, '')
phylosmith::phylogeny_profile(soil_column_I_ARGS, 'Gene', c('Matrix'))
# Sys.setenv("PKG_LIBS"="-lboost_iostreams")
setwd('~/unaligned_BLAST/')
fastq_file_path = 'fastqs/Q3-Mock-0spike-A_S1_L001_R1_001.fastq'
BLAST_file_path = 'blasts/Q3-Mock-0spike-A_S1_L001_R1_001.blast'
if(length(fastq_file_path) == 1 && dir.exists(fastq_file_path)){
fastq_file_path <- gsub('/$','',fastq_file_path)
fastq_file <- vector()
for(extension in c(".fastq.gz$", ".fastq.bz2$", ".fastq$")){
fastq_file <- append(fastq_file, dir(fastq_file_path, extension, full.names = TRUE))
}
} else {
fastq_file <- normalizePath(fastq_file_path)
}
if(length(BLAST_file_path) == 1 && dir.exists(BLAST_file_path)){
BLAST_file_path <- gsub('/$','',BLAST_file_path)
BLAST_file <- dir(BLAST_file_path, full.names = TRUE)
} else {
BLAST_file <- normalizePath(BLAST_file_path)
}
if(length(fastq_file) > 1 || length(BLAST_file) > 1){
if(length(fastq_file) != length(BLAST_file)){
warning('Number of submitted FASTQ and BLAST files are not equal\nonly files with corresponding names will be used.')
fastq_file <- fastq_file[sapply(strsplit(fastq_file,'\\.'),"[[", 1) %in% sapply(strsplit(BLAST_file,'\\.'),"[[", 1)]
BLAST_file <- BLAST_file[sapply(strsplit(BLAST_file,'\\.'),"[[", 1) %in% sapply(strsplit(fastq_file,'\\.'),"[[", 1)]
if(length(fastq_file) != length(BLAST_file) || length(BLAST_file) == 0 || length(fastq_file) == 0){
stop('did it wrong')
}
}
}
file = 1
Rcpp::sourceCpp('unaligned_BLAST_sequences_2.cpp')
setwd('~/Dropbox/repos/ssBLAST/')
library(devtools)
Rcpp::compileAttributes()
document()
check()
document()
Rcpp::compileAttributes()
document()
