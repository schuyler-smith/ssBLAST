#install.packages(c("igraph","igraphdata","MCL","NetIndices"))
library("igraph","igraphdata","MCL","NetIndices")
install.packages(c("igraph","igraphdata","MCL","NetIndices"))
library("igraph","igraphdata","MCL","NetIndices")
library("igraph","igraphdata")
install.packages("igraph","igraphdata","MCL","NetIndices")
install.packages("igraph", "igraphdata", "MCL", "NetIndices")
library("igraph","igraphdata","MCL","NetIndices")
library("igraph","igraphdata")
library("MCL")
library("NetIndices")
net <- union(net_Y2H,net_CCSB)
plot(net, edge.arrow.size=.25, vertex.size=10, vertex.label.cex=.7)
net <- union(net_Y2H,net_CCSB)
net_Y2H <- graph_from_data_frame(d=Y2H, directed=F)
Y2H <- read.csv("Y2H_uniondata.csv")
#install.packages("igraph", "igraphdata", "MCL", "NetIndices")
library("igraph", "igraphdata", "MCL", "NetIndices")
setwd("~/Dropbox/Classes/BCB_IV/BCB_IV_HW_3")
local.libpath <- "C:/Program Files/R/R-3.4.3/library"
.cran_packages <- c("devtools", "curl","dplyr","reshape2", "tidyverse", "magrittr", "readr", "stringr")
.bioc_packages <- c("Biostrings")
.local_packages <-c("zwc")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
source("http://bioconductor.org/biocLite.R")
biocLite(.bioc_packages[!.inst], ask = F)
}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
install.packages('Rcpp')
local.libpath <- "C:/Program Files/R/R-3.4.3/library"
local.libpath <- "~/R/x86_64-pc-linux-gnu-library/3.4"
.cran_packages <- c("devtools", "curl","dplyr","reshape2", "tidyverse", "magrittr", "readr", "stringr")
.bioc_packages <- c("Biostrings")
.local_packages <-c("zwc")
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
source("http://bioconductor.org/biocLite.R")
biocLite(.bioc_packages[!.inst], ask = F)
}
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
.inst <- .local_packages %in% installed.packages()
if(any(!.inst)) {
withr::with_libpaths(new = local.libpath, devtools::install_github('arendsee/zwc'))
}
# Load packages into session
sapply(c(.local_packages), require, character.only = TRUE)
withr::with_libpaths(new = local.libpath, devtools::install_github('arendsee/zwc'))
local.libpath <- "C:/Program Files/R/R-3.4.3/library"
withr::with_libpaths(new = local.libpath, devtools::install_github('arendsee/zwc'))
a<-readRDS("C:/Users/schuyler/Dropbox/Classes/BCB_II/BCB_II_HW_5/files/trim_lengths.Rds")
a
library(kernlab)
library(smotefamily)
library(pROC)
fdata <- read.csv('C_elegans_acc_gc.csv', header =FALSE, col.names = c("class","GCIntron(after)", "GC Exon"))
installed.packages(kernlab)
installed.packages('kernlab'\)
installed.packages('kernlab')
install.packages('kernlab')
install.packages('smotefamily')
install.packages('pROC')
install.packages("pROC")
library(kernlab)
library(smotefamily)
library(pROC)
fdata <- read.csv('C_elegans_acc_gc.csv', header =FALSE, col.names = c("class","GCIntron(after)", "GC Exon"))
library(devtools)
install("C://Users/schuyler/Dropbox/phyloschuyler")
install("C://Users/schuyler/Dropbox/phyloschuyler")
install("C://Users/schuyler/Dropbox/phyloschuyler")
install.packages("Rtools")
library(devtools)
install("C:/Users/schuyler/Dropbox/phyloschuyler")
library(Rtools)
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "*InstallDirectory*/Rtools/bin/",
"*InstallDirectory*/Rtools/mingw_64/bin", sep = ";")) #for 64 bit version
Sys.setenv(BINPREF = "*InstallDirectory*/Rtools/mingw_64/bin")
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools() # is TRUE now
install("C:/Users/schuyler/Dropbox/phyloschuyler")
library(devtools)
install_github("schuyler-smith/phylosmith")
library(phylosmith)
?FastCoOccur
library(devtools)
install_github("schuyler-smith/phylosmith")
library(phylosmith)
?FastCoOccur
?FastCoOccur
library(devtools)
install_github("schuyler-smith/phylosmith")
install_github("joey711/phyloseq")
library(phylosmith)
?find_unique_genes
library(devtools)
update_packages()
?logit
??logit
library(phylosmith)
?network_phyloseq()
install.packages('devtools')
install.packages('tidyverse')
devtools::install_github('schuyler-smith/phylosmith')
devtools::install_github('schuyler-smith/phylosmith')
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
data <- readRDS('C:\Users\schuyler\Dropbox\soil_column_paper\New folder/arg_phy_updated.RDS')
data <- readRDS('C:/Users/schuyler/Dropbox/soil_column_paper/New folder/arg_phy_updated.RDS')
data@otu_table
colSums()data@otu_table)
colSums(data@otu_table)
data.frame(colSums(data@otu_table))
write.csv(data.frame(colSums(data@otu_table)), 'C:/Users/schuyler/Dropbox/soil_column_paper/New folder/out.csv')
devtools::update_packages()
devtools::update_packages()
library(rlang)
devtools::update_packages()
devtools::install_github("r-lib/rlang")
library(tidyr)
devtools::install_github("r-lib/rlang")
devtools::install_github("r-lib/rlang")
.Library
install.packages(c("dplyr", "ellipsis", "git2r", "pillar", "processx", "quantreg", "sf", "zip"))
devtools::install_github("r-lib/rlang")
devtools::update_packages()
library(pkgload)
install.packages('tidyr')
install.packages('devtools')
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
devtools::update_packages()
install.packages('devtools')
devtools::update_packaegs()
install.packages("data.table")
library(devtools)
update_packages(
)
update_packages(
)
update_packages(
)
update_packages(
)
update_packages(
)
update_packages(
)
update_packages(
)
install.packages('digest')
install.packages("digest")
library(devtools)
update_packages()
update_packages()
devtools::update_packages()
library(devtools)
install.packages("devtools")
library(devtools)
update_packages()
update_packages()
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
shakalakarama0011
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
Rcpp::sourceCpp('../Dropbox/repos/ssBLAST/src/unaligned_BLAST_sequences.cpp')
library(devtools)
Rcpp::compileAttributes()
setwd('../Dropbox/repos/ssBLAST/')
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
document()
document()
install()
